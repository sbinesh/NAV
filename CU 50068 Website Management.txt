OBJECT Codeunit 50068 Website Management
{
  OBJECT-PROPERTIES
  {
    Date=10/23/18;
    Time=[ 5:15:41 AM];
    Modified=Yes;
    Version List=WI;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            GetDocumentSetup;
            SendItemstoWebsite.RESET;
            SendItemstoWebsite.SETCURRENTKEY("Product Type","Process Status","Document No.");
            SendItemstoWebsite.SETRANGE("Product Type", SendItemstoWebsite."Product Type"::Documents);
            SendItemstoWebsite.SETRANGE("Process Status",SendItemstoWebsite."Process Status"::Pending);
            SendItemstoWebsite.SETFILTER("Document No.",'<>%1', '');
            IF SendItemstoWebsite.FINDSET THEN BEGIN
              REPEAT
                CLEARLASTERROR;
                IF NOT ExportDocument(SendItemstoWebsite."Document No.") THEN BEGIN
                  SendItemtoWebsiteErrorsLog.INIT;
                  SendItemtoWebsiteErrorsLog."Entry No." := 0;
                  SendItemtoWebsiteErrorsLog."Send Items Entry No." := SendItemstoWebsite."Entry No.";
                  SendItemtoWebsiteErrorsLog."Product Type" := SendItemstoWebsite."Product Type";
                  SendItemtoWebsiteErrorsLog."Item No." := SendItemstoWebsite."Item No.";
                  SendItemtoWebsiteErrorsLog.Type := SendItemstoWebsite.Type;
                  IF STRLEN(GETLASTERRORTEXT) > 250 THEN
                    SendItemtoWebsiteErrorsLog."Error Description" := COPYSTR(GETLASTERRORTEXT,1,250)
                  ELSE
                    SendItemtoWebsiteErrorsLog."Error Description" := GETLASTERRORTEXT;
                  SendItemtoWebsiteErrorsLog."Error Log DateTime" := CURRENTDATETIME;
                  SendItemtoWebsiteErrorsLog."Response Code" := 'Error in Exporting File';
                  SendItemtoWebsiteErrorsLog.INSERT(TRUE);
                END;
              UNTIL SendItemstoWebsite.NEXT = 0;
            END;
          END;

  }
  CODE
  {
    VAR
      SendItemstoWebsite@1000000002 : Record 50104;
      SendItemtoWebsiteErrorsLog@1000000003 : Record 50055;
      WinSCPSesh@1000000018 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.Session";
      WinSCPSessionOptions@1000000017 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.SessionOptions";
      WinSCPTransferOptions@1000000016 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.TransferOptions";
      WinSCPTransferResults@1000000015 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.TransferOperationResult";
      WinSCPTransferResumeSupport@1000000014 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.TransferResumeSupport";
      WinSCPTransferResumeSupportState@1000000013 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.TransferResumeSupportState";
      MoveFileDotNet@1000000012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      WinSCPProtocol@1000000011 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.Protocol";
      WinSCPFtpSecure@1000000010 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.FtpSecure";
      WinSCPRemoteInfoColl@1000000009 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.RemoteDirectoryInfo";
      WinSCPRemoteInfo@1000000008 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.RemoteFileInfo";
      DirectoryCheck@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      FileManagement@1000000006 : Codeunit 419;
      Directory@1000000005 : Record 2000000022;
      DocumentSetup@1000000004 : Record 50065;
      WinSCP_Executable_Path@1000000019 : TextConst 'ENU=C:\Program Files (x86)\WinSCP\WinSCP.exe';
      ExportFile@1000000000 : Text;
      HasDocumentSetup@1000000001 : Boolean;

    LOCAL PROCEDURE GetDocumentSetup@1000000000();
    BEGIN
      IF NOT HasDocumentSetup THEN
        DocumentSetup.GET;
    END;

    [TryFunction]
    PROCEDURE ExportDocument@1000000016(DocNoP@1000000002 : Code[20]);
    VAR
      DocumentL@1000000000 : Record 50066;
      OutStream@1000000005 : OutStream;
      InStream@1000000004 : InStream;
      OutputFile@1000000003 : File;
    BEGIN
      DocumentL.GET(DocNoP);
      IF DocumentL.CALCFIELDS(Content) THEN BEGIN
        IF DocumentL.Content.HASVALUE THEN BEGIN
          ExportFile := DocumentSetup."Temp Path" + DocumentL."No." + '.' + DocumentL."File Extension";
          IF EXISTS(ExportFile) THEN ERASE(ExportFile);
          OutputFile.WRITEMODE(TRUE);
          OutputFile.CREATE(ExportFile);
          OutputFile.CREATEOUTSTREAM(OutStream);
          DocumentL.Content.CREATEINSTREAM(InStream);
          IF NOT COPYSTREAM(OutStream,InStream) THEN ERROR(GETLASTERRORTEXT);
          OutputFile.CLOSE;

          IF NOT UploadFile(ExportFile) THEN
          BEGIN
            CLEARLASTERROR;
            SendItemtoWebsiteErrorsLog.INIT;
            SendItemtoWebsiteErrorsLog."Entry No." := 0;
            SendItemtoWebsiteErrorsLog."Send Items Entry No." := SendItemstoWebsite."Entry No.";
            SendItemtoWebsiteErrorsLog."Product Type" := SendItemstoWebsite."Product Type";
            SendItemtoWebsiteErrorsLog."Item No." := SendItemstoWebsite."Item No.";
            SendItemtoWebsiteErrorsLog.Type := SendItemstoWebsite.Type;
            IF STRLEN(GETLASTERRORTEXT) > 250 THEN
              SendItemtoWebsiteErrorsLog."Error Description" := COPYSTR(GETLASTERRORTEXT,1,250)
            ELSE
              SendItemtoWebsiteErrorsLog."Error Description" := GETLASTERRORTEXT;
            SendItemtoWebsiteErrorsLog."Error Log DateTime" := CURRENTDATETIME;
            SendItemtoWebsiteErrorsLog."Response Code" := 'Error on Uploading to SFTP';
            SendItemtoWebsiteErrorsLog.INSERT(TRUE);

            SendItemstoWebsite."Process Status" := SendItemstoWebsite."Process Status"::Failed;
            SendItemstoWebsite."Processed DateTime" := CURRENTDATETIME;
            SendItemstoWebsite.MODIFY;
          END ELSE BEGIN
            IF EXISTS(ExportFile) THEN ERASE(ExportFile);
            SendItemstoWebsite."Process Status" := SendItemstoWebsite."Process Status"::" ";
            SendItemstoWebsite."Processed DateTime" := CURRENTDATETIME;
            SendItemstoWebsite.MODIFY;
          END;
        END;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE UploadFile@1000000003(SourceFileP@1000000000 : Text);
    BEGIN
      GetDocumentSetup;
      WinSCPSessionOptions := WinSCPSessionOptions.SessionOptions();
      WinSCPSessionOptions.Protocol := WinSCPProtocol.Sftp;
      WinSCPSessionOptions.HostName := DocumentSetup."SFTP HostName";
      WinSCPSessionOptions.PortNumber := DocumentSetup."SFTP Port";
      WinSCPSessionOptions.UserName := DocumentSetup."SFTP User Name";
      WinSCPSessionOptions.Password := DocumentSetup."SFTP Password";
      WinSCPSessionOptions.SshHostKeyFingerprint := DocumentSetup."SFTP Host Key";

      WinSCPSesh := WinSCPSesh.Session();
      WinSCPSesh.ExecutablePath(WinSCP_Executable_Path);
      WinSCPSesh.Open(WinSCPSessionOptions);
      IF WinSCPSesh.Opened THEN BEGIN
        WinSCPTransferOptions := WinSCPTransferOptions.TransferOptions;
        WinSCPTransferOptions.TransferMode := 0;
        WinSCPTransferResumeSupport := WinSCPTransferOptions.ResumeSupport;
        WinSCPTransferResumeSupport.State(WinSCPTransferResumeSupportState.Off);

        IF WinSCPSesh.FileExists(WinSCPSesh.HomePath()+'uploads/'+FileManagement.GetFileName(SourceFileP)) THEN
          WinSCPSesh.RemoveFiles(WinSCPSesh.HomePath()+'uploads/'+FileManagement.GetFileName(SourceFileP));
        WinSCPTransferResults :=
                  WinSCPSesh.PutFiles(SourceFileP,
                                      WinSCPSesh.HomePath()+'uploads/',
                                      FALSE,
                                      WinSCPTransferOptions
                                      );
      END ELSE ERROR('Connection Failed!');

      IF WinSCPSesh.Opened THEN WinSCPSesh.Dispose();
    END;

    LOCAL PROCEDURE UploadFiles@1000000001();
    BEGIN
      GetDocumentSetup;
      WinSCPSessionOptions := WinSCPSessionOptions.SessionOptions();
      WinSCPSessionOptions.Protocol := WinSCPProtocol.Sftp;
      WinSCPSessionOptions.HostName := DocumentSetup."SFTP HostName";
      WinSCPSessionOptions.PortNumber := DocumentSetup."SFTP Port";
      WinSCPSessionOptions.UserName := DocumentSetup."SFTP User Name";
      WinSCPSessionOptions.Password := DocumentSetup."SFTP Password";
      WinSCPSessionOptions.SshHostKeyFingerprint := DocumentSetup."SFTP Host Key";

      WinSCPSesh := WinSCPSesh.Session();
      WinSCPSesh.ExecutablePath(WinSCP_Executable_Path);
      WinSCPSesh.Open(WinSCPSessionOptions);
      IF WinSCPSesh.Opened THEN BEGIN
        WinSCPTransferOptions := WinSCPTransferOptions.TransferOptions;
        WinSCPTransferOptions.TransferMode := 0;
        WinSCPTransferResumeSupport := WinSCPTransferOptions.ResumeSupport;
        WinSCPTransferResumeSupport.State(WinSCPTransferResumeSupportState.Off);

        Directory.SETRANGE(Path, DocumentSetup."Temp Path");
        Directory.SETRANGE("Is a file", TRUE);
        IF Directory.FINDSET THEN
          REPEAT
            IF WinSCPSesh.FileExists(WinSCPSesh.HomePath()+'uploads/' + Directory.Name) THEN
              WinSCPSesh.RemoveFiles(WinSCPSesh.HomePath()+'uploads/' + Directory.Name);
            WinSCPTransferResults :=
                      WinSCPSesh.PutFiles(DocumentSetup."Temp Path" + Directory.Name,
                                          WinSCPSesh.HomePath()+'uploads/',
                                          FALSE,
                                          WinSCPTransferOptions
                                          );
          UNTIL Directory.NEXT = 0;
      END ELSE ERROR('Connection Failed!');

      IF WinSCPSesh.Opened THEN WinSCPSesh.Dispose();
    END;

    LOCAL PROCEDURE RemoveFile@1000000005(SourceFileP@1000000000 : Text);
    BEGIN
      GetDocumentSetup;
      WinSCPSessionOptions := WinSCPSessionOptions.SessionOptions();
      WinSCPSessionOptions.Protocol := WinSCPProtocol.Sftp;
      WinSCPSessionOptions.HostName := DocumentSetup."SFTP HostName";
      WinSCPSessionOptions.PortNumber := DocumentSetup."SFTP Port";
      WinSCPSessionOptions.UserName := DocumentSetup."SFTP User Name";
      WinSCPSessionOptions.Password := DocumentSetup."SFTP Password";
      WinSCPSessionOptions.SshHostKeyFingerprint := DocumentSetup."SFTP Host Key";

      WinSCPSesh := WinSCPSesh.Session();
      WinSCPSesh.ExecutablePath(WinSCP_Executable_Path);
      WinSCPSesh.Open(WinSCPSessionOptions);
      IF WinSCPSesh.Opened THEN BEGIN
        IF WinSCPSesh.FileExists(WinSCPSesh.HomePath()+'uploads/'+FileManagement.GetFileName(SourceFileP)) THEN
          WinSCPSesh.RemoveFiles(WinSCPSesh.HomePath()+'uploads/'+FileManagement.GetFileName(SourceFileP));
      END ELSE ERROR('Connection Failed!');

      IF WinSCPSesh.Opened THEN WinSCPSesh.Dispose();
    END;

    LOCAL PROCEDURE DownloadFiles@1000000013();
    BEGIN
      GetDocumentSetup;
      WinSCPSessionOptions := WinSCPSessionOptions.SessionOptions();
      WinSCPSessionOptions.Protocol := WinSCPProtocol.Sftp;
      WinSCPSessionOptions.HostName := DocumentSetup."SFTP HostName";
      WinSCPSessionOptions.PortNumber := DocumentSetup."SFTP Port";
      WinSCPSessionOptions.UserName := DocumentSetup."SFTP User Name";
      WinSCPSessionOptions.Password := DocumentSetup."SFTP Password";
      WinSCPSessionOptions.SshHostKeyFingerprint := DocumentSetup."SFTP Host Key";

      WinSCPSesh := WinSCPSesh.Session();
      WinSCPSesh.ExecutablePath(WinSCP_Executable_Path);
      WinSCPSesh.Open(WinSCPSessionOptions);
      IF WinSCPSesh.Opened THEN BEGIN
        WinSCPTransferOptions := WinSCPTransferOptions.TransferOptions;
        WinSCPTransferOptions.TransferMode := 0;
        WinSCPTransferResumeSupport := WinSCPTransferOptions.ResumeSupport;
        WinSCPTransferResumeSupport.State(WinSCPTransferResumeSupportState.Off);
        WinSCPTransferResults :=
                WinSCPSesh.GetFiles(WinSCPSesh.HomePath()+'uploads/',
                                    DocumentSetup."Temp Path"+'Download\',
                                    FALSE,
                                    WinSCPTransferOptions
                                    );
      END ELSE ERROR('Connection Failed!');

      IF WinSCPSesh.Opened THEN WinSCPSesh.Dispose();
    END;

    LOCAL PROCEDURE CountFiles@1000000006() CountL : Integer;
    BEGIN
      GetDocumentSetup;
      WinSCPSessionOptions := WinSCPSessionOptions.SessionOptions();
      WinSCPSessionOptions.Protocol := WinSCPProtocol.Sftp;
      WinSCPSessionOptions.HostName := DocumentSetup."SFTP HostName";
      WinSCPSessionOptions.PortNumber := DocumentSetup."SFTP Port";
      WinSCPSessionOptions.UserName := DocumentSetup."SFTP User Name";
      WinSCPSessionOptions.Password := DocumentSetup."SFTP Password";
      WinSCPSessionOptions.SshHostKeyFingerprint := DocumentSetup."SFTP Host Key";

      WinSCPSesh := WinSCPSesh.Session();
      WinSCPSesh.ExecutablePath(WinSCP_Executable_Path);
      WinSCPSesh.Open(WinSCPSessionOptions);
      IF WinSCPSesh.Opened THEN BEGIN
        WinSCPRemoteInfoColl := WinSCPSesh.ListDirectory(WinSCPSesh.HomePath()+'uploads/');
        WinSCPRemoteInfo := WinSCPRemoteInfoColl.Files();
        CLEAR(CountL);
        FOREACH WinSCPRemoteInfo IN WinSCPRemoteInfoColl.Files DO
          IF NOT WinSCPRemoteInfo.IsDirectory THEN
            CountL += 1;
      END ELSE ERROR('Connection Failed!');

      IF WinSCPSesh.Opened THEN WinSCPSesh.Dispose();
      EXIT(CountL);
    END;

    [TryFunction]
    PROCEDURE UploadFileOverFTP@1000000009(FileNameToUpload@1000000000 : Text;UploadToFtp@1000000004 : Text;Login@1000000001 : Text;Password@1000000002 : Text);
    VAR
      FTPRequest@1000000016 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.FtpWebRequest";
      FTPResponse@1000000015 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.FtpWebResponse";
      Credentials@1000000014 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential";
      ResponseStream@1000000013 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StreamReader@1000000012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      FileStream@1000000011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      RealFileStream@1000000010 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream";
      FilesList@1000000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      SimpleStream@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StatusCode@1000000007 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.FtpStatusCode";
      Files@1000000006 : Record 2000000022;
    BEGIN
      FTPRequest := FTPRequest.Create(UploadToFtp);
      Credentials := Credentials.NetworkCredential(Login,Password);
      FTPRequest.Credentials := Credentials;
      FTPRequest.KeepAlive := TRUE;
      FTPRequest.Method := 'STOR';
      FTPRequest.UsePassive := TRUE;
      FTPRequest.UseBinary := TRUE;
      RealFileStream := FileStream.OpenRead(FileNameToUpload);
      SimpleStream := FTPRequest.GetRequestStream;
      RealFileStream.CopyTo(SimpleStream);
      SimpleStream.Close;
      RealFileStream.Close;
    END;

    EVENT WinSCPSesh@1000000018::FileTransferred@48(sender@1000000001 : Variant;e@1000000000 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.TransferEventArgs");
    BEGIN
    END;

    EVENT WinSCPSesh@1000000018::Failed@49(sender@1000000001 : Variant;e@1000000000 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.FailedEventArgs");
    BEGIN
    END;

    EVENT WinSCPSesh@1000000018::OutputDataReceived@50(sender@1000000001 : Variant;e@1000000000 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.OutputDataReceivedEventArgs");
    BEGIN
    END;

    EVENT WinSCPSesh@1000000018::FileTransferProgress@51(sender@1000000001 : Variant;e@1000000000 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.FileTransferProgressEventArgs");
    BEGIN
    END;

    EVENT WinSCPSesh@1000000018::QueryReceived@52(sender@1000000001 : Variant;e@1000000000 : DotNet "'WinSCPnet, Version=1.5.6.8731, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf'.WinSCP.QueryReceivedEventArgs");
    BEGIN
    END;

    BEGIN
    {
      +--------------------------------------------------------------------------------------------------------+
      | Harger Customizations   (Development by Sbinesh Under VLC Solutions LLC.)                              |
      +--------------------------------------------------------------------------------------------------------+
      | Job No.     Date      Description                                                                      |
      +--------------------------------------------------------------------------------------------------------+
        HGR          10.22.18  Added new object for Uploading Documents over SFTP.
    }
    END.
  }
}

